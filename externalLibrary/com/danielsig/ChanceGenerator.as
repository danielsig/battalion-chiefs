package com.danielsig{	import flash.utils.Dictionary;	public class ChanceGenerator	{		private static var _dict : Dictionary = new Dictionary();		public static function GenerateUint(...chances) : uint		{			var length : uint = chances.length;			var totalChance : Number = 0;			for(var i : int = 0; i < length; i++)			{				totalChance += chances[i];			}			var rand : Number = Math.random() * totalChance;			for(i = 0; i < length; i++)			{				if(rand > totalChance - chances[i])				{					return i;				}				totalChance -= chances[i];			}			return length-1;		}		public static function GenerateBoolean(chanceOfTrue : Number = 1, chanceOfFalse : Number = 1) : Boolean		{			return Math.random() * (chanceOfTrue + chanceOfFalse) > chanceOfFalse;		}				private var _elements : Vector.<*>;		private var _chances : Vector.<Number>;		private var _len : uint;				private var _mostLikely : uint = 0;		private var _leastLikely : uint = 0;		/**		 * ChanceGenerator constructor.		 * The arguements passed to this function determines both the elements to select from		 * and the chance of each and every element being returned by the random() method.		 * Every two arguements represent an element and it's chance of being returnd by the random() method.		 * An element can be of any type, but the chance must be of type Number.		 * @example Here's a simple example of tracing either "hello" or "world":<listing version="3.0">var myChance : ChanceGenerator = new ChanceGenerator("hello", 20, "world", 5);trace(myChance.random());//75% chance of tracing "hello", and 25% chance of tracing "world"</listing>		 * @example Here's a another example of tracing out fruit names:<listing version="3.0">var myChance : ChanceGenerator = new ChanceGenerator("orange", 0.5, "apple", 0.5, "banana", 0.5, "pineapple", 1, "peach", 1.2);trace(myChance.random());//chances of tracing...//"orange" = 13.513%//"apple" = 13.513%//"banana" = 13.513%//"pineapple" = 27.027%//"peach" = 32.432%</listing>		 * @param	firstElement, the first element		 * @param	firstChance, the chance of the first element being selected		 * @param	secondElement, the second element		 * @param	secondChance, the chance of the second element being selected		 * @param	...rest, the rest of the elements and their chances		 */		public function ChanceGenerator(firstElement : *, firstChance : Number, secondElement : *, secondChance : Number, ...rest)		{			var len : uint = rest.length;			if (len & 1) throw new Error("The number of arguements must be an even number.");			_len = (len >>> 1) + 2;			_elements = new Vector.<*>(_len);			_chances = new Vector.<Number>(_len);						if (secondChance > firstChance)			{				var max : Number = secondChance;				var min : Number = firstChance;			}			else			{				max = firstChance;				if (secondChance == firstChance) min = firstChance;				else min = secondChance;			}						_elements[0] = firstElement;			_elements[1] = secondElement;			_chances[0] = firstChance;			_chances[1] = secondChance;						var totalChance : Number = firstChance + secondChance;						for (var i : uint = 0; i < len; i += 2)			{				var index : uint = 2 + (i >>> 1);				_elements[index] = rest[i];				var chance : Number = _chances[index] = rest[i + 1]				totalChance += chance;				if (chance > max)				{					max = chance;					_mostLikely = index;				}				if (chance < min)				{					min = chance;					_leastLikely = index;				}			}			totalChance = 1 / totalChance;			for (i = 0; i < _len; i++)			{				_chances[i] *= totalChance;			}		}		/**		 * A random element based on the given chances of each element		 * @return a random element		 */		public function random() : *		{			var rand : Number = Math.random();			var totalChance : Number = 1;			for(var i : uint = 0; i < _len; i++)			{				if(rand > totalChance - _chances[i])				{					return _elements[i];				}				totalChance -= _chances[i];			}			return _elements[_len-1];		}		/**		 * The most probable element		 */		public function get mostProbable() : *		{			return _elements[_mostLikely];		}		/**		 * The least probable element		 */		public function get leastProbable() : *		{			return _elements[_leastLikely];		}		/**		 * Returns the total chance of choosing any of the given elements as a Number between 0 and 1		 * 0.0 = 0% chance		 * 0.5 = 50% chance		 * 1.0 = 100% chance		 * etc.		 * 		 * @param	element, the first element to check for		 * @param	...rest, the rest of the elements to check for.		 * @return Number, the total chance of choosing any of the given elements		 */		public function getChancesOf(element : *, ...rest) : Number		{			var restLen : uint = rest.length;			if (!restLen)			{				var index : int = _elements.indexOf(element);				if (index < 0) return 0;				return _chances[index];			}			else			{				var totalChance : Number = 0;								index = _elements.indexOf(element);				if (index >= 0) totalChance += _chances[index];				for (var i : uint = 0; i < restLen; i++)				{					index = _elements.indexOf(rest[i]);					if (index >= 0) totalChance += _chances[index];				}				return totalChance;			}		}		public function getProbableElements(minimumChance : Number) : Vector.<*>		{			var elements : Vector.<*> = new Vector.<*>();			for (var i : uint = 0; i < _len; i++)			{				if (_chances[i] > minimumChance) elements.push(_elements[i]);			}			return elements;		}		/**		 * Use this method to both reassign chances of specific elements and also to add new elements and their chances.		 * Remember that the chances that are given in the constructor are normalized (50/50 becomes 0.5/0.5) so that		 * the total chance is always 1. This means that when you add an element or reassign the chance of an old element,		 * the given chance must be between 0 and 1. If you pass 1 as the chance, then it will have a 100% chance of being		 * selected, hence every other element will have 0% chance. If you pass 0.75 as the chance, then it will have 75% chance of being		 * selected and there will be 25% chance of selecting ANY of the other elements etc.		 * Be careful when changing chances of multiple elements. Order matters (see the examples).		 * @example Here's a simple example to demonstrate how the order of setChanceOf() calls matters:<listing version="3.0">var c : ChanceGenerator = new ChanceGenerator("foo", 75, "bar", 25);c.setChanceOf("smu", 0.5);c.setChanceOf("foo", 0);trace(c);// ChanceGenerator [ bar: 20.0%, smu: 80.0% ]c = new ChanceGenerator("foo", 75, "bar", 25);c.setChanceOf("foo", 0);c.setChanceOf("smu", 0.5);trace(c);// ChanceGenerator [ bar: 50.0%, smu: 50.0% ]</listing>		 * @param	element, the element to add/reassign chance		 * @param	chance, a Number between 0 and 1 determining the new chance of the element		 */		public function setChanceOf(element : *, chance : Number) : void		{			if (chance < 0) chance = 0;			else if (chance > 1) chance = 1;						var oldChance : Number = 0;			var index : int = _elements.indexOf(element);			if (index < 0)			{				if (chance == 0) return;				_elements.push(element);				_chances.push(chance);				index = (_len = _elements.length) - 1;				var totalChance : Number = 1 - chance;			}			else			{				if (chance == 0)				{					totalChance = 1 / (1 - _chances[index]);					_elements.splice(index, 1);					_chances.splice(index, 1);					_len--;					if (_mostLikely > index) _mostLikely--;					else if (_mostLikely == index)					{						var max : Number = Number.MIN_VALUE;						for (var i : uint = 0; i < _len; i++)						{							if (_chances[i] > max)							{								max = _chances[i];								_mostLikely = i;							}						}					}					if (_leastLikely > index) _leastLikely--;					else if (_leastLikely == index)					{						var min : Number = Number.MIN_VALUE;						for (i = 0; i < _len; i++)						{							if (_chances[i] < min)							{								min = _chances[i];								_leastLikely = i;							}						}					}					for (i = 0; i < _len; i++)					{						_chances[i] *= totalChance;					}					return;				}				else				{					oldChance = _chances[index];					_chances[index] = chance;					totalChance = (1 - chance) / (1 - _chances[index]);				}			}			for (i = 0; i < index; i++)			{				_chances[i] *= totalChance;			}			for (i = index+1; i < _len; i++)			{				_chances[i] *= totalChance;			}						if (chance > _chances[_mostLikely]) _mostLikely = index;			else if (_mostLikely == index && chance < oldChance)			{				max = Number.MIN_VALUE;				for (i = 0; i < _len; i++)				{					if (_chances[i] > max)					{						max = _chances[i];						_mostLikely = i;					}				}			}			if (chance < _chances[_leastLikely]) _leastLikely = index;			else if (_leastLikely == index && chance > oldChance)			{				min = Number.MIN_VALUE;				for (i = 0; i < _len; i++)				{					if (_chances[i] < min)					{						min = _chances[i];						_leastLikely = i;					}				}			}		}		public function toString() : String		{			var value : String = "ChanceGenerator [ " + _elements[0] + ": " + ((_chances[0] * 100) as Number).toPrecision(3) + "%";			for (var i : uint = 1; i < _len; i++)			{				value += ", " + _elements[i] + ": " + ((_chances[i] * 100) as Number).toPrecision(3) + "%";			}			value += " ]";			return value;		}	}}