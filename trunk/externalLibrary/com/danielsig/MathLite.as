/* 		TO NEW USERS:		The random numbers are natural numbers based on Benfords law. E.g. there's 30.1% probability of the random number starting with 0.1		This class contains probably the fastes cosinus and sinus methods ever written solely in AS3 to date. That is, it does not implement an external interface or interact with an external programming environment like Pixelbender or Haxe.		Every method in this class is faster than or equally fast as a parallel method in the Math class. SO USE IT!		Code Snippets are at the bottom and they are MUCH faster than the methods since functions are TERRIBLY TIGHT bottlenecks when it comes to speed.		When I talk about accuracy in percentage; 100% accuracy means it resembles the Math class method perfecly and 0% accuracy means the method has a median offset of ±1.0 in the output with all the most probable inputs.				The MathLite class is a singleton. Do not try to instantiate it. Instead use the getInstance method to get a reference to the singleton instance.*/package com.danielsig{		/**	 * @author Daniel Sig	 */	public final class MathLite{				public const PI:Number = 3.141592653589793;//this is clearly obvious		public const PHI:Number = 1.6180339887;//the golden ratio								public const RANDOM:Vector.<Number> = Vector.<Number>([0.1744, 0.6197, 0.9027, 0.3134, 0.8255, 0.3311, 0.3992, 0.5728, 0.1669, 0.1344, 0.788, 0.8576, 0.4387, 0.1389, 0.5406, 0.5225, 0.129, 0.1342, 0.1275, 0.5621, 0.4713, 0.5763, 0.2508, 0.5248, 0.3841, 0.1588, 0.3117, 0.8823, 0.2263, 0.2072, 0.1336, 0.1435, 0.1897, 0.1728, 0.1314, 0.3293, 0.6689, 0.1359, 0.1389, 0.4115, 0.3426, 0.1049, 0.6328, 0.1525, 0.2304, 0.2393, 0.2494, 0.125, 0.1804, 0.9148, 0.1383, 0.1734, 0.5313, 0.1472, 0.502, 0.1918, 0.4625, 0.1661, 0.4218, 0.1893, 0.2144, 0.2467, 0.2943, 0.2199, 0.1344, 0.1716, 0.2182, 0.3011, 0.4419, 0.4048, 0.963, 0.1414, 0.4536, 0.5515, 0.1909, 0.1362, 0.1344, 0.4974, 0.3557, 0.623, 0.3668, 0.3611, 0.1886, 0.1102, 0.1853, 0.621, 0.1472, 0.1218, 0.2604, 0.6793, 0.2461, 0.6065, 0.2018, 0.33, 0.3428, 0.1027, 0.1055, 0.3863, 0.4641, 0.1128, 0.109, 0.3067, 0.8811, 0.1924, 0.3897, 0.1945, 0.9379, 0.1133, 0.1049, 0.1663, 0.1791, 0.7406, 0.2002, 0.8006, 0.3972, 0.4892, 0.473, 0.5603, 0.1126, 0.7259, 0.6875, 0.2214, 0.5753, 0.106, 0.2923, 0.3917, 0.1214, 0.3652, 0.7168, 0.5067, 0.2518, 0.2691, 0.1225, 0.4854, 0.118, 0.1017, 0.1215, 0.1725, 0.1921, 0.1751, 0.2379, 0.6229, 0.5779, 0.2003, 0.3832, 0.1028, 0.2033, 0.2294, 0.1988, 0.4742, 0.7898, 0.7768, 0.4269, 0.1712, 0.8181, 0.2604, 0.1614, 0.3043, 0.1664, 0.179, 0.3631, 0.2111, 0.1129, 0.7093, 0.3125, 0.1868, 0.2691, 0.2907, 0.3908, 0.2734, 0.4267, 0.4502, 0.5515, 0.6639, 0.6805, 0.6455, 0.2893, 0.2761, 0.6003, 0.2765, 0.1794, 0.8259, 0.2184, 0.6456, 0.5036, 0.2616, 0.4846, 0.6554, 0.13, 0.8029, 0.9852, 0.1012, 0.9694, 0.1479, 0.5257, 0.5216, 0.1853, 0.8068, 0.9996, 0.1085, 0.7325, 0.2455, 0.1002, 0.126, 0.2272, 0.9281, 0.5423, 0.5761, 0.4461, 0.3845, 0.6779, 0.3943, 0.7111, 0.3284, 0.2202, 0.9346, 0.1918, 0.9877, 0.7007, 0.995, 0.2399, 0.5396, 0.2351, 0.3536, 0.1832, 0.1483, 0.9477, 0.1757, 0.1833, 0.1097, 0.1569, 0.2323, 0.491, 0.1164, 0.2623, 0.2585, 0.1026, 0.5274, 0.6864, 0.288, 0.4921, 0.8151, 0.4267, 0.2707, 0.9534, 0.6183, 0.1608, 0.3444, 0.4259, 0.2804, 0.1528, 0.3508, 0.6175, 0.1408, 0.5982, 0.3062, 0.1062, 0.1921, 0.1116, 0.396, 0.24, 0.2594, 0.1189, 0.5381, 0.5004, 0.2522, 0.4388, 0.6692, 0.1047, 0.1663, 0.3358, 0.3969, 0.3264, 0.1646, 0.1608, 0.1507, 0.3293, 0.4835, 0.6524, 0.7398, 0.2357, 0.5793, 0.7534, 0.1795, 0.2816, 0.1372, 0.5048, 0.7808, 0.9268, 0.185, 0.1087, 0.4966, 0.7133, 0.1359, 0.3808, 0.2446, 0.8387, 0.7478, 0.3836, 0.4561, 0.8591, 0.1046, 0.545, 0.2064, 0.1002, 0.1589, 0.2285, 0.338, 0.1017, 0.2475, 0.3043, 0.7501, 0.7538, 0.3149, 0.4232, 0.4556, 0.1206, 0.9777, 0.1621, 0.1738, 0.8744, 0.5601, 0.1206, 0.1016, 0.9927, 0.4718, 0.1502, 0.3404, 0.2936, 0.6201, 0.1228, 0.3066, 0.206, 0.4998, 0.2937, 0.3268, 0.2441, 0.6311, 0.3201, 0.3893, 0.4623, 0.3267, 0.1062, 0.3429, 0.2967, 0.3988, 0.275, 0.3429, 0.2958, 0.1572, 0.454, 0.5599, 0.252, 0.1855, 0.4436, 0.2463, 0.522, 0.3479, 0.1169, 0.6688, 0.703, 0.1041, 0.5998, 0.6263, 0.6148, 0.6199, 0.3178, 0.9175, 0.6862, 0.8903, 0.9134, 0.5783, 0.6644, 0.61, 0.117, 0.176, 0.2372, 0.7943, 0.9404, 0.2293, 0.142, 0.3273, 0.1751, 0.4818, 0.1042, 0.6186, 0.5373, 0.3944, 0.2975, 0.1089, 0.1163, 0.1177, 0.5865, 0.4815, 0.1805, 0.2644, 0.4344, 0.2381, 0.9279, 0.1467, 0.2054, 0.4476, 0.2639, 0.7477, 0.1339, 0.6793, 0.3743, 0.1645, 0.1218, 0.883, 0.1623, 0.5229, 0.19, 0.4117, 0.3791, 0.1139, 0.2534, 0.8997, 0.2332, 0.2699, 0.2138, 0.1328, 0.4547, 0.3776, 0.1237, 0.4596, 0.6441, 0.6946, 0.4222, 0.4496, 0.2327, 0.1382, 0.2052, 0.3366, 0.2603, 0.282, 0.2121, 0.2911, 0.4106, 0.1677, 0.498, 0.9004, 0.2329, 0.14, 0.844, 0.4094, 0.5071, 0.1205, 0.3981, 0.2253, 0.2135, 0.3121, 0.2951, 0.1242, 0.2666, 0.4235, 0.147, 0.3024, 0.5453, 0.4554, 0.1859, 0.35, 0.9926, 0.6903, 0.1228, 0.3539, 0.6594, 0.1424, 0.3389, 0.1847, 0.1034, 0.7529, 0.3004, 0.2133, 0.2199, 0.8583, 0.1545, 0.7435, 0.1861, 0.2301, 0.6871, 0.297, 0.5292, 0.1543, 0.1007, 0.3112, 0.9, 0.8929, 0.4759, 0.149, 0.7495, 0.2048, 0.5589, 0.7361, 0.3111, 0.4853, 0.3332, 0.2693, 0.4506, 0.3893, 0.5319, 0.7943, 0.5029, 0.2474, 0.7962, 0.5359, 0.7791, 0.2708, 0.1341, 0.3074, 0.2182, 0.1529, 0.7185, 0.1827, 0.1984, 0.9653, 0.1031, 0.8537, 0.1172, 0.2676, 0.2763, 0.7421, 0.6376, 0.6814, 0.7664, 0.5112, 0.6759, 0.1882, 0.2809, 0.8729, 0.9252, 0.4327, 0.1067, 0.5076, 0.1345, 0.1477, 0.6308, 0.435, 0.3135, 0.2796, 0.1869, 0.8695, 0.8938, 0.4488, 0.1043, 0.2463, 0.409, 0.391, 0.1072, 0.2662, 0.4756, 0.1578, 0.6336, 0.5409, 0.7527, 0.6344, 0.1822, 0.74, 0.8803, 0.4907, 0.2642, 0.5177, 0.7931, 0.8728, 0.782, 0.2633, 0.5312, 0.3761, 0.8288, 0.1968, 0.8862, 0.3581, 0.1196, 0.8145, 0.128, 0.259, 0.1942, 0.5349, 0.1606, 0.5667, 0.4035, 0.1964, 0.3697, 0.5725, 0.1529, 0.2599, 0.1073, 0.7306, 0.3742, 0.106, 0.2353, 0.1181, 0.1289, 0.2896, 0.1269, 0.1019, 0.1522, 0.6347, 0.1784, 0.1817, 0.7214, 0.8734, 0.1466, 0.2104, 0.2436, 0.5816, 0.3245, 0.9704, 0.2069, 0.5661, 0.814, 0.1459, 0.1325, 0.1253, 0.224, 0.3626, 0.4563, 0.361, 0.2436, 0.828, 0.1253, 0.3129, 0.1727, 0.1246, 0.1766, 0.3614, 0.7164, 0.7121, 0.2354, 0.1311, 0.7237, 0.2357, 0.6272, 0.4107, 0.2858, 0.5515, 0.3425, 0.5415, 0.2132, 0.865, 0.1103, 0.9862, 0.1144, 0.8641, 0.7905, 0.1561, 0.2723, 0.1576, 0.4266, 0.4318, 0.4568, 0.3936, 0.5232, 0.3276, 0.2843, 0.693, 0.7726, 0.2251, 0.1016, 0.1621, 0.3229, 0.2727, 0.1845, 0.7302, 0.2618, 0.1335, 0.2232, 0.1013, 0.4528, 0.4951, 0.1264, 0.3224, 0.1558, 0.1292, 0.1371, 0.1586, 0.1127, 0.5746, 0.8582, 0.1038, 0.3126, 0.4547, 0.1065, 0.1295, 0.1073, 0.1164, 0.3347, 0.9036, 0.1356, 0.1541, 0.8139, 0.8305, 0.1362, 0.4818, 0.9986, 0.199, 0.4199, 0.2498, 0.3177, 0.9542, 0.1282, 0.2367, 0.5326, 0.2413, 0.1827, 0.3444, 0.1004, 0.4069, 0.2997, 0.2014, 0.7535, 0.2505, 0.3088, 0.1948, 0.1488, 0.9853, 0.4053, 0.6294, 0.3489, 0.8453, 0.219, 0.1123, 0.346, 0.3167, 0.7799, 0.2897, 0.1989, 0.1618, 0.198, 0.1562, 0.2133, 0.338, 0.9511, 0.6312, 0.7056, 0.1149, 0.5516, 0.9531, 0.2824, 0.3994, 0.1511, 0.2895, 0.7598, 0.28, 0.3683, 0.9677, 0.1538, 0.6919, 0.1844, 0.1854, 0.3337, 0.24, 0.2402, 0.1534, 0.4766, 0.5162, 0.521, 0.1171, 0.3424, 0.1507, 0.1992, 0.6269, 0.9467, 0.2143, 0.4635, 0.3529, 0.8967, 0.9462, 0.1158, 0.1153, 0.2507, 0.2669, 0.3813, 0.2135, 0.3615, 0.4527, 0.2781, 0.2301, 0.3866, 0.6236, 0.1665, 0.1164, 0.1249, 0.2749, 0.1051, 0.3607, 0.212, 0.118, 0.2078, 0.2799, 0.6729, 0.3446, 0.2322, 0.4606, 0.1763, 0.7428, 0.8012, 0.4111, 0.733, 0.1524, 0.165, 0.1218, 0.3014, 0.1653, 0.2109, 0.4228, 0.4192, 0.9608, 0.9017, 0.1511, 0.366, 0.2357, 0.1693, 0.409, 0.5773, 0.2539, 0.3187, 0.4927, 0.347, 0.1502, 0.1431, 0.8003, 0.8209, 0.7796, 0.1398, 0.6102, 0.4826, 0.1753, 0.4092, 0.1833, 0.2775, 0.1147, 0.8026, 0.1109, 0.3153, 0.1429, 0.7883, 0.6192, 0.1402, 0.1995, 0.1559, 0.7895, 0.5589, 0.5243, 0.1559, 0.3477, 0.1472, 0.4714, 0.7513, 0.6424, 0.5166, 0.2583, 0.4698, 0.1194, 0.1081, 0.5374, 0.2476, 0.6791, 0.9104, 0.4429, 0.4021, 0.1066, 0.3466, 0.5868, 0.3269, 0.5876, 0.1034, 0.2812, 0.2186, 0.5742, 0.1587, 0.4869, 0.2792, 0.4571, 0.4365, 0.6946, 0.8828, 0.9708, 0.2338, 0.5953, 0.6925, 0.3934, 0.2241, 0.1616, 0.4215, 0.3514, 0.2926, 0.1327, 0.2036, 0.1294, 0.1954, 0.1761, 0.2624, 0.9031, 0.7848, 0.2898, 0.9341, 0.6172, 0.1165, 0.1976, 0.1318, 0.6883, 0.8774, 0.2114, 0.5134, 0.7215, 0.5752, 0.1362, 0.1085, 0.6191, 0.1503, 0.2081, 0.6837, 0.7808, 0.942, 0.5658, 0.211, 0.1195, 0.9593, 0.1288, 0.152, 0.3677, 0.3926, 0.7158, 0.5108, 0.6144, 0.5374, 0.1026, 0.5506, 0.227, 0.3128, 0.1365, 0.2837, 0.2424, 0.3579, 0.2309, 0.3495, 0.1386, 0.9135, 0.5524, 0.6999, 0.2302, 0.171, 0.5572, 0.7458, 0.8154, 0.8648, 0.921, 0.1552, 0.8658, 0.849, 0.9962, 0.1075, 0.1293, 0.839, 0.2738, 0.139, 0.1195, 0.1453, 0.1131, 0.4343, 0.354, 0.9834, 0.3695, 0.8336, 0.1979, 0.1945, 0.55, 0.3201, 0.2245, 0.8858, 0.8332, 0.1146, 0.8508, 0.1998, 0.1144, 0.2566, 0.2791, 0.1423, 0.2044, 0.1588, 0.4211, 0.4031, 0.7951, 0.4261, 0.4095, 0.1237, 0.6278, 0.1201, 0.2673, 0.5469, 0.1212, 0.4003, 0.8637, 0.1707, 0.1999, 0.688, 0.1048, 0.2387, 0.285]);		public const INDEXES:Vector.<int> = Vector.<int>([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,0]);		public var currentIndex:int = 0;				private static const INSTANCE:MathLite = new MathLite();				public static function getInstance():MathLite{ return INSTANCE; }				public function MathLite(){			if(INSTANCE)  throw new Error("can not be instantiated. Please use the static method getInstance()");		}				public function random():Number{ return RANDOM[currentIndex = INDEXES[currentIndex]]; }//1.3 times faster then Math.random();		public function randomBoolean():Boolean{ return RANDOM[currentIndex = INDEXES[currentIndex]] > 0.316; }		public function randomRange(range : uint = 1):uint{			var number : Number = RANDOM[currentIndex = INDEXES[currentIndex]];			return uint((-(number+(3/(4*(number+0.5))))+1.5) * range);		}				public function normal(value:*, unit:*):*{			if(unit < 0) return Number.NaN;			if(value > 0){				if(value < unit) return value / unit;				else return 1;			}			if(value > -unit) return value / unit;			else return -1;		}		public function abs(value:Number):Number{//1.25 times faster than Math.abs();			if(value < 0) return -value;			return value;		}		public function length(vx:Number, vy:Number):Number{// same speed as Math.sqrt(x * x + y * y);			/*if(vx < 0) vx = -vx;			if(vy < 0) vy = -vy;			vy = vy / vx + 2.44;			vy = -9.4 / (vy * vy) + 1.57079633;			vx += 0.0000000000001;			if(vy < 0.7854) return vx / (-0.482 * vy * vy + 1);			else if(vy < 2.3562){				if(vy < 1.5708) return vx / (-0.676 * vy - 0.0921 * vy * vy + 1.305);				else return vx / (-1.2711 * vy + 0.0915 * vy * vy + 1.764);			}else return vx / (0.475 * vy * vy + vy * -2.9831 + 3.687);*/			if(vx < 0) vx = -vx;			if(vy < 0) vy = -vy;			var angle : Number = vx / vy;			angle = -9.4 / ((angle + 2.44) * (angle + 2.44)) + 1.57079633;						if(angle < 0.7854){				if(angle < -1.571){					if(angle < -2.3562) var cos:Number = 0.475 * angle * angle + angle * 2.9831 + 3.687;					else cos = 1.2711 * angle + 0.0915 * angle * angle + 1.764;				}else if(angle < -0.7854) cos = 0.676 * angle - 0.0921 * angle * angle + 1.302;				else cos = -0.482 * angle * angle + 1;			}else if(angle < 2.3562){				if(angle < 1.5708) cos = -0.676 * angle - 0.0921 * angle * angle + 1.302				else cos = -1.2711 * angle + 0.0915 * angle * angle + 1.764;			}else cos = 0.475 * angle * angle + angle * -2.9831 + 3.687;						if(angle < -1.57079632) angle += 4.71238899;			else angle -= 1.57079632;			if(angle < 0.7854){				if(angle < -1.571){					if(angle < -2.3562) var sin:Number = 0.475 * angle * angle + angle * 2.9831 + 3.687;					else sin = 1.2711 * angle + 0.0915 * angle * angle + 1.764;				}else if(angle < -0.7854) sin = 0.676 * angle - 0.0921 * angle * angle + 1.302;				else sin = -0.482 * angle * angle + 1;			}else if(angle < 2.3562){				if(angle < 1.5708) sin = -0.676 * angle - 0.0921 * angle * angle + 1.302				else sin = -1.2711 * angle + 0.0915 * angle * angle + 1.764;			}else sin = 0.475 * angle * angle + angle * -2.9831 + 3.687;						//var angle : Number = atan2(vx, vy);			return  cos * vy + sin * vx;		}		public function atan(r:Number):Number{			if(r > 0) return -9.4 / ((r + 2.44) * (r + 2.44)) + 1.57079633;			return 9.4 / ((r - 2.44) * (r - 2.44)) - 1.57079633;		}		public function atan2(y:Number, x:Number):Number{			y /= x;			if(x < 0){				if(y > 0) return -9.4 / ((y + 2.44) * (y + 2.44)) - 1.57079633;				return 9.4 / ((y - 2.44) * (y - 2.44)) + 1.57079633;			}			if(y > 0) return -9.4 / ((y + 2.44) * (y + 2.44)) + 1.57079633;			return 9.4 / ((y - 2.44) * (y - 2.44)) - 1.57079633;		}		public function cos(angle:Number):Number{//1.5 times faster than Math.cos();			if (angle < -3.14159265) angle += 6.28318531;			else if (angle >  3.14159265) angle -= 6.28318531;			if(angle > 1.57079632) angle -= 4.71238899;			else angle += 1.57079632;			if(angle < 0) {				angle = 1.27323954 * angle + 0.405284735 * angle * angle;				if(angle < 0) return 0.225 * (angle * -angle - angle) + angle;				else return 0.225 * (angle * angle - angle) + angle;			}else{				angle = 1.27323954 * angle - 0.405284735 * angle * angle;				if (angle < 0) return 0.225 * (angle * -angle - angle) + angle;				else return 0.225 * (angle * angle - angle) + angle;			}		}		public function fastCos(angle:Number):Number{//1.6 times faster than Math.cos();			if (angle < -3.14159265) angle += 6.28318531;			else if (angle >  3.14159265) angle -= 6.28318531;			if(angle < 0.7854){				if(angle < -1.571){					if(angle < -2.3562) return 0.475 * angle * angle + angle * 2.9831 + 3.687;					else return 1.2711 * angle + 0.0915 * angle * angle + 1.764;				}else if(angle < -0.7854) return 0.676 * angle - 0.0921 * angle * angle + 1.302;				else return -0.482 * angle * angle + 1;			}else if(angle < 2.3562){				if(angle < 1.5708) return -0.676 * angle - 0.0921 * angle * angle + 1.302				else return -1.2711 * angle + 0.0915 * angle * angle + 1.764;			}else return 0.475 * angle * angle + angle * -2.9831 + 3.687;		}				public function sin(angle:Number):Number{//1.5 times faster than Math.sin();			if (angle < -3.14159265) angle += 6.28318531;			else if (angle >  3.14159265) angle -= 6.28318531;			if (angle < 0) {				angle = 1.27323954 * angle + 0.405284735 * angle * angle;				if (angle < 0) return 0.225 * (angle * -angle - angle) + angle;				else return 0.225 * (angle * angle - angle) + angle;			}else{				angle = 1.27323954 * angle - 0.405284735 * angle * angle;				if (angle < 0) return 0.225 * (angle * -angle - angle) + angle;				else return 0.225 * (angle * angle - angle) + angle;			}		}				public function fastSin(angle:Number):Number{//1.6 times faster than Math.sin();			if (angle < -3.14159265) angle += 6.28318531;			else if (angle >  3.14159265) angle -= 6.28318531;			if(angle < -1.57079632) angle += 4.71238899;			else angle -= 1.57079632;			if(angle < 0.7854){				if(angle < -1.571){					if(angle < -2.3562) return 0.475 * angle * angle + angle * 2.9831 + 3.687;					else return 1.2711 * angle + 0.0915 * angle * angle + 1.764;				}else if(angle < -0.7854) return 0.676 * angle - 0.0921 * angle * angle + 1.302;				else return -0.482 * angle * angle + 1;			}else if(angle < 2.3562){				if(angle < 1.5708) return -0.676 * angle - 0.0921 * angle * angle + 1.302				else return -1.2711 * angle + 0.0915 * angle * angle + 1.764;			}else return 0.475 * angle * angle + angle * -2.9831 + 3.687;		}				public function getVector(angle:Number):Object{			return {};		}		// For SUPER high speeds copy-paste the following codes in your own class to get rid of the function bottleneck.		// First, make sure the MathLite class is imported into the package then copy-paste the following line of code to your class.		/*				private static const M:MathLite = MathLite.getInstance();		*/				// Here come the code snippets.				// ABSOLUTE approximately 70 times faster than Math.abs();		/*				if(myNumber < 0) myNumber = -myNumber;		*/						// RANDOM approximately 7.5 times faster than Math.random();		/*				var myRandomNumber:Number = M.RANDOM[M.currentIndex = M.INDEXES[M.currentIndex]];		*/						// LENGTH approximately 4 times faster than Math.sqrt(x * x + y * y); but it has the average offset of ±0.01		/*				var vy:Number = 1;//your y length here				var vx:Number = 1;//your x length here				if(vx < 0) vx = -vx;				if(vy < 0) vy = -vy;				vy = vy / vx + 2.44;				vy = -9.4 / (vy * vy) + 1.57079633;				vx += 0.0000000000001;				if(vy < 0.7854) var lenght:Number = vx / (-0.482 * vy * vy + 1);				else if(vy < 2.3562){					if(vy < 1.5708) lenght = vx / (-0.676 * vy - 0.0921 * vy * vy + 1.302);					else lenght = vx / (-1.2711 * vy + 0.0915 * vy * vy + 1.764);				}else lenght = vx / (0.475 * vy * vy + vy * -2.9831 + 3.687);		*/				// COSINUS approximately 6 times faster than Math.cos(); with 99.92% accuracy.		// make sure your angle is between -PI and PI or else the cosinus will be, well, wrong.		/*				var angle:Number = 0;//your angle here				if(angle > 1.57079632) angle -= 4.71238899;				else angle += 1.57079632;				if(angle < 0) {					angle = 1.27323954 * angle + 0.405284735 * angle * angle;					if(angle < 0) var cos:Number = 0.225 * (angle * -angle - angle) + angle;					else cos = 0.225 * (angle * angle - angle) + angle;				}else{					angle = 1.27323954 * angle - 0.405284735 * angle * angle;					if (angle < 0) cos = 0.225 * (angle * -angle - angle) + angle;					else cos = 0.225 * (angle * angle - angle) + angle;				}		*/				// FAST COSINUS approximately 9 times faster than Math.cos(); with 99.7% accuracy.		// make sure your angle is between -PI and PI.				/*				var angle:Number = 0;//your angle here				if(angle < 0.7854){					if(angle < -1.571){						if(angle < -2.3562) var cos:Number = 0.475 * angle * angle + angle * 2.9831 + 3.687;						else cos = 1.2711 * angle + 0.0915 * angle * angle + 1.764;					}else if(angle < -0.7854) cos = 0.676 * angle - 0.0921 * angle * angle + 1.302;					else cos = -0.482 * angle * angle + 1;				}else if(angle < 2.3562){					if(angle < 1.5708) cos = -0.676 * angle - 0.0921 * angle * angle + 1.302					else cos = -1.2711 * angle + 0.0915 * angle * angle + 1.764;				}else cos = 0.475 * angle * angle + angle * -2.9831 + 3.687;		*/				// SINUS approximately 6 times faster than Math.sin(); with 99.92% accuracy.		// just as with cosinus, make sure your angle is between -PI and PI or else the sinus will be wrong.		/*				var angle:Number = 0;//your angle here				if (angle < 0) {					angle = 1.27323954 * angle + 0.405284735 * angle * angle;					if (angle < 0) var sin:Number = 0.225 * (angle * -angle - angle) + angle;					else sin = 0.225 * (angle * angle - angle) + angle;				}else{					angle = 1.27323954 * angle - 0.405284735 * angle * angle;					if (angle < 0) sin = 0.225 * (angle * -angle - angle) + angle;					else sin = 0.225 * (angle * angle - angle) + angle;				}		*/				// FAST SINUS approximately 9 times faster than Math.sin(); with 99.7% accuracy.		// make sure your angle is between -PI and PI.				/*				var angle:Number = 0;//your angle here				if(angle < -1.57079632) angle += 4.71238899;				else angle -= 1.57079632;				if(angle < 0.7854){					if(angle < -1.571){						if(angle < -2.3562) var cos:Number = 0.475 * angle * angle + angle * 2.9831 + 3.687;						else cos = 1.2711 * angle + 0.0915 * angle * angle + 1.764;					}else if(angle < -0.7854) cos = 0.676 * angle - 0.0921 * angle * angle + 1.302;					else cos = -0.482 * angle * angle + 1;				}else if(angle < 2.3562){					if(angle < 1.5708) cos = -0.676 * angle - 0.0921 * angle * angle + 1.302					else cos = -1.2711 * angle + 0.0915 * angle * angle + 1.764;				}else cos = 0.475 * angle * angle + angle * -2.9831 + 3.687;		*/				// ATAN around 25 times faster than Math.atan(); with 99.97% accuracy.		/*				if(r > 0) var angle:Number = -9.4 / ((r + 2.44) * (r + 2.44)) + 1.57079633;				else angle = 9.4 / ((r - 2.44) * (r - 2.44)) - 1.57079633;		*/	}}