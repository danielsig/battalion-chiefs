package com.danielsig{	import flash.geom.Point;	import flash.utils.*;			/**	 * @private	 * @author Daniel Sig	 */	public class SimpleEval	{		private var _code : Array;		private var _args : Array;		private var _local : Boolean = false;				private function traceLocals() : void		{			trace(" = " + this);		}		public function toString() : String		{			var codeString : Array = _code.concat();			if (codeString[0] == "(" && codeString[codeString.length - 1] == ")")			{				codeString = codeString.slice(1, codeString.length - 1);			}			for(var c : int = 0; c < codeString.length; c++)			{				var val : * = codeString[c];				if(val is Function)				{					var f : Function = val;					if(f == divide)						codeString[c] = "/";					else if(f == multiply)						codeString[c] = "*";					else if(f == plus)						codeString[c] = "+";					else if(f == minus)						codeString[c] = "-";					else if(f == postIncrement)						codeString[c++] = "++";					else if(f == postDecrement)						codeString[c++] = "--";					else if(f == lessThan)						codeString[c] = "<";					else if(f == greaterThan)						codeString[c] = ">";					else if(f == lessThanOrEquals)						codeString[c] = "<=";					else if(f == greaterThanOrEquals)						codeString[c] = ">=";					else if(f == equals)						codeString[c] = "==";					else if(f == notEquals)						codeString[c] = "!=";					else if(f == and)						codeString[c] = "&&";					else if(f == or)						codeString[c] = "||";					else if(f == ifElse)						codeString[c] = "?";				}				else if (val is Point)				{					codeString[c] = "(" + val.x + ", " + val.y + ")";				}				else if (val is Number && val && val % 0x22 == 0)//smart hex detect :P				{					codeString[c] = "0x" + (val as Number).toString(16).toUpperCase();				}			}			return codeString.join(" ");		}				public function call(...parameters) : *		{			var originalCode : Array = _code;			_code = _code.concat();			_args = parameters;			//trace("-----------");			for(var i : int = 0; i < _code.length; i++)			{				//traceLocals();				var current : *;				if(i+1 < _code.length)				{					current = _code[i+1];					if(current is String)					{						if(current == "(")						{							i+=2;							continue;						}						else if(current == ")" && i > 0)						{							_code.splice(i-1, 3, _code[i--]);							i-=2							continue;						}					}				}				current = _code[i];				if(current is Function)				{					_code.splice(i > 0 ? i-1 : 0, 3, current(i--));					i-=2;				}				if(i >= _code.length && _code.length > 1)				{					i = -1;				}			}			var value : * = getVar(_code.length - 1);			_code = originalCode;			var string : String = value;			if(string && string.charAt(0) == '"' && string.charAt(string.length-1) == '"')			{				return string.slice(1, string.length-1).replace(/\\/g, "");			}			else if(_local && _args[0].hasOwnProperty(string))			{				return _args[0][string];			}			return value;		}		public static function eval(code : String, local : Boolean = false) : Function		{			return new SimpleEval(code, local).call;		}		public function SimpleEval(code : String, local : Boolean = false)		{			_local = local;			_code = compile(code);		}		private function compile(source : String) : Array		{			var arr : Array = source.split(/('(?:[^']|\\')*')|("(?:[^"]|\\")*")|([\-\+]+|[\*\/%\(\)]|[<!>]?==?)|(?: )|([<>(&&)(\|\|)])/);			for(var i : int = 0; i < arr.length; i++)			{				switch(arr[i])				{					case "":					case " ":					case '"':					case "'":					case undefined:					case null:						arr.splice(i--, 1);						break;				}			}			for(i = 0; i < arr.length; i++)			{				if(!_local)				{					switch(arr[i])					{						case "x":						case "a":							arr[i] = "$0";							break;						case "y":						case "b":							arr[i] = "$1";							break;						case "z":						case "c":							arr[i] = "$2";							break;						case "w":						case "d":							arr[i] = "$3";							break;					}				}				switch(arr[i])				{					case "":					case " ":					case '"':					case "'":					case undefined:					case null:						arr.splice(i--, 1);						break;					case "<":					case "lt":						arr[i] = lessThan;						break;					case ">":					case "gt":						arr[i] = greaterThan;						break;					case "<=":					case "lt=":						arr[i] = lessThanOrEquals;						break;					case ">=":					case "gt=":						arr[i] = greaterThanOrEquals;						break;					case "==":						arr[i] = equals;						break;					case "!=":						arr[i] = notEquals;						break;					case "true":						arr[i] = true;						break;					case "false":						arr[i] = false;						break;					case "&":						if(i + 1 < arr.length && arr[i+1] == "&")							arr[i] = and;						arr.splice(i+1, 1);						break;					case "&&":						arr[i] = and;						break;					case "||":						arr[i] = or;						break;					case "+":						arr[i] = plus;						break;					case "-":						arr[i] = minus;						break;					case "*":						arr[i] = multiply;						break;					case "/":						arr[i] = divide;						break;					case "%":						arr[i] = modulus;						break;					case "++":						if (i && !(arr[i - 1] is Function))						{							arr[i] = postIncrement;							arr.splice(i+1, 0, 1);						}						else						{							arr[i] = 1;							arr.splice(i+1, 0, preIncrement);						}						break;					case "--":						if (i && !(arr[i - 1] is Function))						{							arr[i] = postDecrement;							arr.splice(i+1, 0, 1);						}						else						{							arr[i] = 1;							arr.splice(i+1, 0, preDecrement);						}						break;					case "(":					case ")":					case ":":						break;					case "?":						arr[i] = ifElse;						break;					default:						var string : String = arr[i] + "";						var first : String = string.charAt(0);						var last : String = string.charAt(string.length-1);						if(string.length > 1 && (first == '"' && last == '"' || first == "'" && last == "'"))						{							arr[i] = '"' + string.slice(1, string.length-1) + '"';						}						else if(last == ",")						{							if (i && arr[i - 1] == minus)							{								arr[i] = "-" + arr[i];								arr.splice(--i, 1);							}							for(var c : int = i+1; c < arr.length; c++)							{								if(arr[c] == "-")								{									arr[i] += "-";								}								else if(/\d/.test(arr[c]))								{									arr[i] += arr[c];									arr.splice(i+1, c-i);									i--;									break;								}							}						}						else if(first == "!" && !_local)						{							switch(string.charAt(1))							{								case "x":								case "a":									arr[i] = "!$0" + string.slice(2);									break;								case "y":								case "b":									arr[i] = "!$1" + string.slice(2);									break;								case "z":								case "c":									arr[i] = "!$2" + string.slice(2);									break;								case "w":								case "d":									arr[i] = "!$3" + string.slice(2);									break;								case "$":									break;								default:									arr.splice(i--, 1);							}						}						else if(!isNaN(Number(arr[i])))						{							arr[i] = Number(arr[i]);						}						else if(/^[+-]?[0-9]*\.?[0-9]+,[+-]?[0-9]*\.?[0-9]+$/.test(arr[i]))						{							var notPoint : Boolean = true;							for(c = i-1; c > -1; c--)							{								if(arr[c] != undefined)								{									if(arr[c] == "(")									{										for(var j : int = i+1; j < arr.length; j++)										{											if(arr[j] != undefined)											{												if(arr[j] == ")")												{													var float : RegExp = /[+-]?[0-9]*\.?[0-9]+/g;													var number : String = float.exec(arr[i]);													var number1 : Number = (number.charAt(0) == "-" ? -1 : 1) * Number(/[^\+\- ]+$/.exec(number));													number = float.exec(arr[i]);													var number2 : Number = (number.charAt(0) == "-" ? -1 : 1) * Number(/[^\+\- ]+$/.exec(number));													arr[i] = new Point(number1, number2);													arr.splice(j, 1);													arr.splice(c, 1);													i--;													notPoint = false;													break;												}												else break;											}										}										break;									}									else break;								}							}							if(notPoint)							{								arr.splice(i--, 1);							}						}						else if(!_local && string.search(/^(\$\d+|[xyzwabcd])\.[a-zA-Z_][a-zA-Z0-9_-]*$/) > -1)						{							if(string.search(/^[xyzwabcd]/) > -1)							{								switch(first)								{									case "x":									case "a":										arr[i] = "$0" + string.slice(1);										break;									case "y":									case "b":										arr[i] = "$1" + string.slice(1)										break;									case "z":									case "c":										arr[i] = "$2" + string.slice(1)										break;									case "w":									case "d":										arr[i] = "$3" + string.slice(1)										break;								}							}						}						else if(!_local)						{							arr.splice(i--, 1);						}						break;				}			}			var functions : Vector.<Function> = Vector.<Function>([divide, multiply, plus, minus, lessThan, greaterThan, lessThanOrEquals, greaterThanOrEquals, equals, notEquals, and, or]);			for(j = 0; j < functions.length; j++)			{				var f : Function = functions[j];				for(i = 0; i < arr.length; i++)				{					if(arr[i] == f)					{						i = addParenthesis(i, arr);					}				}			}			return arr;		}		private function addParenthesis(i : int, arr : Array) : int		{			var pCount : int = 0;			var index : int = i;			var foundValue : Boolean = false;			while(index-- > 0 && (pCount > 0 || !foundValue))			{				if(arr[index] == ")")				{					pCount++;				}				else if(arr[index] == "(")				{					pCount--;				}				else if(!(arr[index] is Function))				{					foundValue = true;				}			}			if(foundValue)			{				arr.splice(++index, 0, "(");				foundValue = false;				index = ++i;				while(++index < arr.length && (pCount > 0 || !foundValue))				{					if(arr[index] == "(")					{						pCount++;					}					else if(arr[index] == ")")					{						pCount--;					}					else if(!(arr[index] is Function))					{						foundValue = true;					}				}				if(foundValue)				{					arr.splice(index, 0, ")");				}			}			return i;		}		private function lessThan(i : int) : Boolean		{			return getVar(i-1) < getVar(i+1);		}		private function greaterThan(i : int) : Boolean		{			return getVar(i-1) > getVar(i+1);		}		private function lessThanOrEquals(i : int) : Boolean		{			return getVar(i-1) <= getVar(i+1);		}		private function greaterThanOrEquals(i : int) : Boolean		{			return getVar(i-1) >= getVar(i+1);		}		private function equals(i : int) : Boolean		{			var first : * = getVar(i-1);			var second : * = getVar(i+1);			if(first is Point && second is Point)			{				return first.equals(second);			}			return first == second;		}		private function notEquals(i : int) : Boolean		{			var first : * = getVar(i-1);			var second : * = getVar(i+1);			if(first is Point && second is Point)			{				return !first.equals(second);			}			return first != second;		}		private function and(i : int) : Boolean		{			return getVar(i-1) && getVar(i+1);		}		private function or(i : int) : Boolean		{			return getVar(i-1) || getVar(i+1);		}		private function plus(i : int) : *		{			if (!i || (_code[i-1] is Function)) return getVar(i + 1);			var first : * = getVar(i-1, 0, -1);			var second : * = getVar(i+1, 0, 1);			if(first is Point && !(second is String))			{				return first.add(second);			}			return first + second;		}		private function postIncrement(i : int) : *		{			return getVar(i - 1, 0, 0, 1);		}		private function preIncrement(i : int) : *		{			return getVar(i + 1, 0, 0, 2);		}		private function minus(i : int) : *		{			if (!i || (_code[i-1] is Function)) return -getVar(i+1);			var first : * = getVar(i - 1);			if(first is Point)			{				return first.subtract(getVar(i+1));			}			return first - getVar(i+1);		}		private function postDecrement(i : int) : *		{			return getVar(i - 1, 0, 0, -1);		}		private function preDecrement(i : int) : *		{			return getVar(i + 1, 0, 0, -2);		}		private function multiply(i : int) : *		{			var first : * = getVar(i-1);			var second : * = getVar(i+1);			if(first is Point)			{				if(second is Point)				{					return first.x * second.x + first.y * second.y;				}				else				{					return new Point(first.x * second, first.y * second);				}			}			return first * second;		}		private function divide(i : int) : *		{			var first : * = getVar(i-1);			var second : * = getVar(i+1);			if(first is Point)			{				if(second is Point)				{					return Point.distance(first as Point, second as Point);				}				else				{					second = 1 / second;					return new Point(first.x * second, first.y * second);				}			}			return getVar(i-1) / getVar(i+1);		}		private function modulus(i : int) : *		{			var first : * = getVar(i-1);			var second : * = getVar(i+1);			if(first is Point)			{				if(second is Point)				{					return (first.x * second.x + first.y * second.y) / Math.sqrt((first.x * first.x + first.y * first.y) * (second.x * second.x + second.y * second.y));				}				else				{					second = second / first.length;					return new Point(first.x * second, first.y * second);				}			}			return getVar(i-1) / getVar(i+1);		}		private function ifElse(i : int) : Object		{			var index1 : int = _code.indexOf(":", i);			if(getVar(i-1))			{				var pCount : int = 0;				var index2 : int = index1;				while(pCount > -1 && index2++ < _code.length)				{					if(_code[index2] == ")")					{						pCount--;					}					else if(_code[index2] == "(")					{						pCount++;					}				}				_code.splice(index1, index2 - index1);				return getVar(i+1);			}			else if(index1 + 1 < _code.length && i+2 < _code.length)			{				var variable : * = getVar(index1+1);				_code.splice(i+2, _code.indexOf(":", i+2)-i);				return variable;			}			return null;		}		private function getVar(i : int, count : int = 0, side : int = 0, increment : int = 0) : *		{			if(_code[i] is Number || _code[i] is Boolean || _code[i] is Point)			{				return _code[i];			}			var varName : String = _code[i] as String;			if(varName && (varName.length > 1 || _local))			{				var first : String = varName.charAt(0);				if(count > 0)				{					varName = varName.slice(count);				}				if(first == "!")				{					return !getVar(i, count + 1);				}				if(first == "$")				{					var object : * = _args[Number(varName.slice(1))];					var objectNames : Array = varName.split(".");					var c : int = 1;					while(c < objectNames.length)					{						object = object[objectNames[c++]];					}					if(object is String)					{						return !side ? object + "" : (side > 0 ? object + '"' : '"' + object);					}					return object;				}				var last : String = varName.charAt(varName.length-1);				if(first == '"' && last == '"')				{					return !side ? varName : (side > 0 ? varName.slice(1) : varName.slice(0, varName.length-1));				}				if(_local)				{					object = _args[0];					objectNames = varName.split(".");					if (objectNames[0] == "thisObj") throw new Error("The variable name 'thisObj' is reserved. Please use another variable name.");					else if (objectNames[0] == "targetObj") throw new Error("The variable name 'targetObj' is reserved. Please use another variable name.");					var isLocal : Boolean = object.hasOwnProperty(objectNames[0]);					if (object.thisObj && (!isLocal || objectNames[0] == "this"))					{						if (objectNames.length > 1 && object.thisObj.hasOwnProperty(objectNames[1]))						{							objectNames[0] = "thisObj";						}						else if (!isLocal)						{							objectNames.unshift("thisObj");						}						else objectNames.shift();					}					else if (object.targetObj)					{						if (object.targetObj.hasOwnProperty(objectNames[0]))						{							objectNames[0] = "targetObj";						}						else if (!isLocal)						{							objectNames.unshift("targetObj");						}					}					c = 0;					var length : uint = objectNames.length;					while(c < length)					{						if(object == null && c > 0)						{							trace("     .+=================================================+.");							trace("    || SimpleEval: Warning! null object reference.       ||");							trace("    || " + StringUtilPro.toMinLength("'" + objectNames[c - 1] + "' is null in the following expression:$||", 52, " "));							trace("    || " + StringUtilPro.toMinLength("\t" + objectNames.join(".") + "$||", 46, " "));							trace("     '+=================================================+'");							return null;						}						if (increment && c == length - 1)						{							if (increment == 1) return object[objectNames[c]]++;							else if(increment == 2) return ++object[objectNames[c]];							else if (increment == -1) return object[objectNames[c]]--;							else return --object[objectNames[c]];						}						object = object[objectNames[c++]];					}					if (object is Point) return (object as Point).clone();					return object;				}				return varName;			}			return null;		}	}}